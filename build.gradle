plugins {
  id "dev.architectury.loom" version "${architectury_loom_version}-SNAPSHOT"
  id "architectury-plugin" version "${architectury_plugin_version}-SNAPSHOT"
  id "java-library"
}

architectury {
  minecraft = minecraft_version
}

group = maven_group
version = mod_version

base {
  archivesName = "${archives_base_name}-${minecraft_version}-neoforge"
}

repositories {

  // Cloth Config
  maven { url = "https://maven.shedaniel.me/" }

  // Mixin Extras
  maven { url = "https://jitpack.io" }

  // neoForge
  maven { url = "https://maven.neoforged.net/releases" }

  // Parchment MC
  maven { url = "https://maven.parchmentmc.org" }

}

dependencies {

  // Minecraft
  minecraft "com.mojang:minecraft:${minecraft_version}"

  // neoForge
  neoForge "net.neoforged:neoforge:${neoforge_version}"

  // Mappings - Mojang
  mappings(loom.officialMojangMappings())

  // Mappings - Parchment + Mojang
  mappings loom.layered() {
    it.officialMojangMappings {
      setNameSyntheticMembers(false)
    }
    it.parchment "org.parchmentmc.data:parchment-${parchment_version}@zip"
  }
  
  // Mappings - Yarn
  mappings loom.layered() {
    it.mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    it.mappings "dev.architectury:yarn-mappings-patch-neoforge:${yarn_mappings_patch_neoforge}"
  }

  // Mappings - Parchment + Yarn
  mappings loom.layered() {
    it.mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    it.mappings "dev.architectury:yarn-mappings-patch-neoforge:${yarn_mappings_patch_neoforge}"
    it.parchment "org.parchmentmc.data:parchment-${parchment_version}@zip"
  }

  // RefMap
  loom {
    mixin {
      mixin.useLegacyMixinAp = true
      defaultRefmapName.set("${archives_base_name}.refmap.json")
    }
  }

  // AccessWidener
  loom {
    if (file("src/main/resources/${archives_base_name}.accesswidener").exists()) {
      accessWidenerPath = file("src/main/resources/${archives_base_name}.accesswidener")
    }
  }

}

dependencies {

  // Cloth Config API
  modApi ("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }

  // Mixin Extras
  include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixinextras_version}")))

}

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
  it.options.release = 21
  it.options.encoding = "UTF-8"
}

processResources {
  def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
  stringProperties.each { inputs.property(it.key, it.value) }
  ["META-INF/neoforge.mods.toml"].each {
    filesMatching(it) {
      expand(stringProperties) { escapeBackslash = true }
    }
  }
}

jar {
  manifest {
    attributes(
      [
        "Specification-Title"     : mod_id,
        "Specification-Vendor"    : mod_authors,
        "Specification-Version"   : "1",
        "Implementation-Title"    : mod_name,
        "Implementation-Version"  : mod_version,
        "Implementation-Vendor"   : mod_authors,
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
      ]
    )
  }
}

remapJar {
  destinationDirectory.set(file("${rootDir}/files"))
}
